// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bookingModel

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4404181cDecodeGithubComKostikansAvitoTestInternalAppBookingModel(in *jlexer.Lexer, out *BookingID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "booking_id":
			out.BookingID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4404181cEncodeGithubComKostikansAvitoTestInternalAppBookingModel(out *jwriter.Writer, in BookingID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"booking_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.BookingID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BookingID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4404181cEncodeGithubComKostikansAvitoTestInternalAppBookingModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BookingID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4404181cEncodeGithubComKostikansAvitoTestInternalAppBookingModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BookingID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4404181cDecodeGithubComKostikansAvitoTestInternalAppBookingModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BookingID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4404181cDecodeGithubComKostikansAvitoTestInternalAppBookingModel(l, v)
}
func easyjson4404181cDecodeGithubComKostikansAvitoTestInternalAppBookingModel1(in *jlexer.Lexer, out *BookingAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "room_id":
			out.RoomID = int64(in.Int64())
		case "date_start":
			out.DateStart = string(in.String())
		case "date_end":
			out.DateEnd = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4404181cEncodeGithubComKostikansAvitoTestInternalAppBookingModel1(out *jwriter.Writer, in BookingAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"room_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.RoomID))
	}
	{
		const prefix string = ",\"date_start\":"
		out.RawString(prefix)
		out.String(string(in.DateStart))
	}
	{
		const prefix string = ",\"date_end\":"
		out.RawString(prefix)
		out.String(string(in.DateEnd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BookingAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4404181cEncodeGithubComKostikansAvitoTestInternalAppBookingModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BookingAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4404181cEncodeGithubComKostikansAvitoTestInternalAppBookingModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BookingAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4404181cDecodeGithubComKostikansAvitoTestInternalAppBookingModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BookingAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4404181cDecodeGithubComKostikansAvitoTestInternalAppBookingModel1(l, v)
}
func easyjson4404181cDecodeGithubComKostikansAvitoTestInternalAppBookingModel2(in *jlexer.Lexer, out *Booking) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "booking_id":
			out.BookingID = int64(in.Int64())
		case "date_start":
			out.DateStart = string(in.String())
		case "date_end":
			out.DateEnd = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4404181cEncodeGithubComKostikansAvitoTestInternalAppBookingModel2(out *jwriter.Writer, in Booking) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"booking_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.BookingID))
	}
	{
		const prefix string = ",\"date_start\":"
		out.RawString(prefix)
		out.String(string(in.DateStart))
	}
	{
		const prefix string = ",\"date_end\":"
		out.RawString(prefix)
		out.String(string(in.DateEnd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Booking) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4404181cEncodeGithubComKostikansAvitoTestInternalAppBookingModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Booking) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4404181cEncodeGithubComKostikansAvitoTestInternalAppBookingModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Booking) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4404181cDecodeGithubComKostikansAvitoTestInternalAppBookingModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Booking) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4404181cDecodeGithubComKostikansAvitoTestInternalAppBookingModel2(l, v)
}

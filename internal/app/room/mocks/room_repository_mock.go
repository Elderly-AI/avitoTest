// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package room_mock is a generated GoMock package.
package room_mock

import (
	roomModel "github.com/Kostikans/avitoTest/internal/app/room/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddRoom mocks base method
func (m *MockRepository) AddRoom(room roomModel.RoomAdd) (roomModel.RoomID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoom", room)
	ret0, _ := ret[0].(roomModel.RoomID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoom indicates an expected call of AddRoom
func (mr *MockRepositoryMockRecorder) AddRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoom", reflect.TypeOf((*MockRepository)(nil).AddRoom), room)
}

// DeleteRoom mocks base method
func (m *MockRepository) DeleteRoom(roomID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom
func (mr *MockRepositoryMockRecorder) DeleteRoom(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockRepository)(nil).DeleteRoom), roomID)
}

// GetRooms mocks base method
func (m *MockRepository) GetRooms(order roomModel.RoomOrder) ([]roomModel.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRooms", order)
	ret0, _ := ret[0].([]roomModel.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRooms indicates an expected call of GetRooms
func (mr *MockRepositoryMockRecorder) GetRooms(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRooms", reflect.TypeOf((*MockRepository)(nil).GetRooms), order)
}

// CheckRoomExist mocks base method
func (m *MockRepository) CheckRoomExist(roomID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRoomExist", roomID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRoomExist indicates an expected call of CheckRoomExist
func (mr *MockRepositoryMockRecorder) CheckRoomExist(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRoomExist", reflect.TypeOf((*MockRepository)(nil).CheckRoomExist), roomID)
}
